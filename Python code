import time
import json
import hashlib
import ecdsa
import binascii

# Wallet class to generate key pairs and sign data
class Wallet:
    def __init__(self):
        # Generate an ECDSA key pair (using SECP256k1 curve)
        self.private_key = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1)
        self.public_key = self.private_key.get_verifying_key()

    def sign(self, data):
        # Sign the SHA-256 hash of the data
        data_hash = hashlib.sha256(data.encode()).digest()
        signature = self.private_key.sign(data_hash)
        return binascii.hexlify(signature).decode()

    def get_public_key(self):
        return binascii.hexlify(self.public_key.to_string()).decode()

# Utility function to verify digital signatures
def verify_signature(public_key_hex, data, signature_hex):
    public_key_bytes = binascii.unhexlify(public_key_hex)
    vk = ecdsa.VerifyingKey.from_string(public_key_bytes, curve=ecdsa.SECP256k1)
    data_hash = hashlib.sha256(data.encode()).digest()
    try:
        return vk.verify(binascii.unhexlify(signature_hex), data_hash)
    except ecdsa.BadSignatureError:
        return False

# VoteTransaction class: each vote is a transaction signed by a voter
class VoteTransaction:
    def __init__(self, sender_public_key, candidate, signature=None):
        self.sender = sender_public_key  # Voter's public key (identity)
        self.candidate = candidate       # The candidate voted for
        self.signature = signature       # Digital signature for the transaction

    def to_dict(self):
        return {
            'sender': self.sender,
            'candidate': self.candidate,
            'signature': self.signature
        }

    def sign_transaction(self, wallet):
        # The data to sign is a concatenation of sender and candidate
        data = self.sender + self.candidate
        self.signature = wallet.sign(data)

    def is_valid(self):
        # A valid transaction must have a signature and that signature must be verifiable
        if self.signature is None:
            return False
        data = self.sender + self.candidate
        return verify_signature(self.sender, data, self.signature)

# Block class stores a list of vote transactions and uses Proof-of-Work (PoW)
class Block:
    def __init__(self, index, transactions, previous_hash, timestamp=None, nonce=0):
        self.index = index
        self.transactions = transactions  # List of VoteTransaction objects
        self.previous_hash = previous_hash
        self.timestamp = timestamp or time.time()
        self.nonce = nonce
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        # Calculate hash over block contents
        block_data = {
            'index': self.index,
            'transactions': [tx.to_dict() for tx in self.transactions],
            'previous_hash': self.previous_hash,
            'timestamp': self.timestamp,
            'nonce': self.nonce
        }
        block_string = json.dumps(block_data, sort_keys=True)
        return hashlib.sha256(block_string.encode()).hexdigest()

    def mine_block(self, difficulty):
        # Adjust nonce until hash meets difficulty requirement (leading zeros)
        while self.hash[:difficulty] != "0" * difficulty:
            self.nonce += 1
            self.hash = self.calculate_hash()
        print(f"Block {self.index} mined: {self.hash}")

    def has_valid_transactions(self):
        # Check that all transactions in the block are valid
        for tx in self.transactions:
            if not tx.is_valid():
                return False
        return True

# Blockchain class that manages the chain, pending transactions, and voter registration
class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 4
        self.pending_transactions = []
        self.voters = {}  # Keep track of voters to prevent double voting

    def create_genesis_block(self):
        genesis_tx = VoteTransaction("0", "Genesis", "0")
        return Block(0, [genesis_tx], "0", time.time())

    def get_latest_block(self):
        return self.chain[-1]

    def add_transaction(self, transaction):
        # Verify transaction signature
        if not transaction.is_valid():
            raise Exception("Invalid transaction signature.")
        # Prevent double voting by checking if the voter has already voted
        if transaction.sender in self.voters:
            raise Exception("Double voting is not allowed.")
        self.pending_transactions.append(transaction)
        self.voters[transaction.sender] = True

    def mine_pending_transactions(self, miner_address):
        # Optionally reward the miner with a system transaction (no signature required)
        reward_tx = VoteTransaction("SYSTEM", miner_address, "SYSTEM")
        transactions = self.pending_transactions + [reward_tx]
        new_block = Block(len(self.chain), transactions, self.get_latest_block().hash)
        new_block.mine_block(self.difficulty)
        self.chain.append(new_block)
        self.pending_transactions = []

    def is_chain_valid(self):
        # Validate the entire blockchain
        for i in range(1, len(self.chain)):
            current = self.chain[i]
            previous = self.chain[i - 1]
            if current.hash != current.calculate_hash():
                return False
            if current.previous_hash != previous.hash:
                return False
            if not current.has_valid_transactions():
                return False
        return True

# Simulation: Creating wallets for voters and processing vote transactions
if __name__ == '__main__':
    # Initialize blockchain
    vote_chain = Blockchain()

    # Create wallets for voters
    voter1 = Wallet()
    voter2 = Wallet()
    voter3 = Wallet()

    # Create vote transactions and sign them
    tx1 = VoteTransaction(voter1.get_public_key(), "CandidateA")
    tx1.sign_transaction(voter1)
    
    tx2 = VoteTransaction(voter2.get_public_key(), "CandidateB")
    tx2.sign_transaction(voter2)
    
    tx3 = VoteTransaction(voter3.get_public_key(), "CandidateA")
    tx3.sign_transaction(voter3)

    # Add transactions to the blockchain (with double-vote prevention)
    try:
        vote_chain.add_transaction(tx1)
        vote_chain.add_transaction(tx2)
        vote_chain.add_transaction(tx3)
    except Exception as e:
        print("Transaction error:", e)

    # Mine a block containing the pending vote transactions
    vote_chain.mine_pending_transactions("Miner1")

    # Display blockchain details
    for block in vote_chain.chain:
        print(f"Block {block.index} | Hash: {block.hash}")
        print("Transactions:")
        for tx in block.transactions:
            print(tx.to_dict())
        print("-" * 40)

    # Validate the blockchain integrity
    print("Blockchain valid?", vote_chain.is_chain_valid())
